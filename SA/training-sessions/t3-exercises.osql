// **************************************
// Training session 3
// Exercises
// **************************************

// Recommended reading for completing these exercises:
// https://studio.streamanalyze.com/docs/guides/general-guides/reducing-streams/basics
// https://studio.streamanalyze.com/docs/guides/general-guides/conditional-stats-on-streams
// https://studio.streamanalyze.com/docs/guides/general-guides/recorded-data-guide/basics

// Create a function problem4_1() 
// that takes a stream of number 
// and outputs a stream of every second number from the stream.

create function problem4_1(stream of number s) -> stream of number
  as /* Write your solution here */


validate "problem 4-1"
  check extract(problem4_1(vstream([1,2,3,4,5,6]))) => bag(1,3,5)
  check extract(problem4_1(vstream([10,20,99,40]))) => bag(10,99);


// Create a function problem4_2() 
// that takes a stream of numbers, 
// computes a moving average over sequences of five with a distance of one, 
// and outputs these as a stream of numbers

create function problem4_2(stream of number s) -> stream of number
  as /* Write your solution here */

validate "problem 4-2"
  check extract(problem4_2(vstream([1,1,1,1,1,2,2,2,2,2]))) => bag(1,1.2,1.4,1.6,1.8,2);


// Define this function that reads testdata used to validate the solutions to 4.3 and 4.4
create function read_test_data(Charstring csv_file) -> Stream of Timeval
    as select Stream of t 
    from Timeval t, Vector v, Number value, charstring timestring
    where v in csv:file_stream(csv_file)
    and [timestring, value] = v
    and t = ts(parse_iso_timestamp(timestring), value);

// Create a function problem4_3() 
// that takes a stream of timevals 
// and samples the first 100 milliseconds from every second.

create function problem4_3(Stream of Timeval tv) -> Stream of Timeval of vector
  as /* Write your solution here */


validate "problem 4-3"
    check(extract(problem4_3(read_test_data(sa_home() + "/training-sessions/exercise_data.csv")))) =>
    bag(ts(|2023-01-17T14:22:25.349Z|, [[1],[2],[3],[4],[5],[6],[7],[8],[9]]),
        ts(|2023-01-17T14:22:26.349Z|, [[100],[101],[102],[103],[104],[105],[106],[107],[108],[109]]),
        ts(|2023-01-17T14:22:27.349Z|, [[201],[202],[203],[204],[205],[206],[207],[208],[209],[210]]),
        ts(|2023-01-17T14:22:28.349Z|, [[301],[302],[303],[304],[305],[306],[307],[308],[309],[310]]),
        ts(|2023-01-17T14:22:29.349Z|, [[401],[402],[403],[404],[405],[406],[407],[408],[409],[410]]));

// Create a function problem4_4() 
// that takes a stream of timevals 
// and, whenever there is a value divisible with 100, 
// gets a timewindow of 100 ms.

create function hundred_p(Timeval of Integer ti) -> Boolean
    as select mod(value(ti),100) = 0;
 
create function problem4_4(Stream of Timeval tv) -> Stream of Timeval of vector
  as /* Write your solution here */
 

 validate "problem 4-4"
    check(extract(problem4_4(read_test_data(sa_home() + "/training-sessions/exercise_data.csv")))) =>
    bag(ts(|2023-01-17T14:22:26.255Z|, [92,93,94,95,96,97,98,99,100]),
        ts(|2023-01-17T14:22:27.245Z|, [190,191,192,193,194,195,196,197,198,199,200]),
        ts(|2023-01-17T14:22:28.238Z|, [289,290,291,292,293,294,295,296,297,298,299,300]),
        ts(|2023-01-17T14:22:29.239Z|, [390,391,392,393,394,395,396,397,398,399,400]),
        ts(|2023-01-17T14:22:30.247Z|, [492,493,494,495,496,497,498,499,500])
        );