// **************************************
// Training session 5
// Using store-and-forward in online edges
// **************************************

// **************************************
// Edge mode
// **************************************

// lets use the local federation that we set up in t5-local-federation
set :edge_name = "test_edge";

// edge state of our test_edge
edge:actual_state(:edge_name);

// we can filter actual_state with a query
select r["edge_mode"] from record r where r in edge:actual_state(:edge_name);

// Use ONLINE mode
edge:set_mode(:edge_name, "ONLINE");

// make sure it is set
select r["edge_mode"] from record r where r in edge:actual_state(:edge_name);

// Change back to INTERACTIVE
edge:set_mode(:edge_name, "INTERACTIVE");

// **************************************
// Store and forward
// **************************************

// Create a record with settings
set :cq_name = "forward1";

set :forward_options = {
  "store-and-forward": :cq_name, // name
  "store-and-forward-interval": 3, // how often to try sending to server (seconds)
  "buffer-size": 100               // max number of stored values
};

// Define the query to forward as a string
set :test_query = "select simstream(1) limit 1000";

// start a store-and-forward query
edge_cq(:edge_name, :test_query, :forward_options);

// look at our edges and see that the cq is running
edge_status();

// we can filter edge_status with a query
select r["requests"] from record r where r in edge_status() and r["id"]=upper(:edge_name);

// now we can go into ONLINE mode
edge:set_mode(:edge_name, "ONLINE");

// to see any result, we must subscribe to the query

// subscribe with @ notation (sa.engine 5.5 or later)
subscribe(:cq_name+"@"+:edge_name);

// alternative for older versions
// subscribe:merge([:cq_name+"@"+:edge_name])

//now, cancel the edge query
cancel_edge_cq(:edge_name, :cq_name);

// **************************************
// Store and forward with a storer function
// **************************************

//A built-in store function that stores every forward in a csv file
doc('snf_csv_storer');

// lets add it to a new options record
set :cq_name2 = "forward2";
set :forward_options_2 = {
  "store-and-forward": :cq_name2,
  "store-and-forward-interval": 3,
  "store-and-forward-storefn": "snf_csv_storer",
  "buffer-size": 100
};

// start the query
edge_cq(:edge_name, :test_query, :forward_options_2);

// in this folder, observe how lots of csv files are created
get_snf_folder(:edge_name);

subscribe(:cq_name2 + "@" + :edge_name);

// stop the query
cancel_edge_cq(:edge_name, :cq_name2);

// **************************************
// Example using the drill model
// **************************************

// Make sure the edge has the model loaded
models:deploy([:edge_name], "drill-broken");

// options for our snf
set :cq_name3 = "forward3";
set :forward_options_3 = {
  "store-and-forward": :cq_name3,
  "store-and-forward-interval": 10, //try to send the result every 10 seconds. A more realistic value may be eg. 10 minutes
  "store-and-forward-storefn": "snf_csv_storer", //store in csv
  "buffer-size": 10000 //lets have a large buffer in case connection is down for a long time 
};

// running a model is a common store-and-foward query
set :model_query = "alert_changed('CHEAP', simulate_accelerometer(), simulate_temperature());";

// start the query
edge_cq(:edge_name, :model_query, :forward_options_3);

// subscribtion will get result continously
subscribe(:cq_name3 + "@" + :edge_name);

// but if connection is lost it takes 10 seconds between reconnect attempts

// stop the query
cancel_edge_cq(:edge_name, :cq_name3);