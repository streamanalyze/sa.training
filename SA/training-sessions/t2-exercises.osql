// **************************************
// Training session 2
// Exercises
// **************************************

// Recommended reading for completing these exercises:
// https://studio.streamanalyze.com/docs/guides/tutorial/basic-functions
// https://studio.streamanalyze.com/docs/guides/tutorial/queries
// https://studio.streamanalyze.com/docs/guides/tutorial/streams

// Create a function problem1_1() that takes a vector of integers 
// and returns the vector with all integers divisible by three removed.

create function problem1_1(vector of integer v) -> vector of integer
  as /* Write your solution here */


validate "problem 1-1"
  check problem1_1([1,2,3,4,5,6]) => [1,2,4,5]
  check problem1_1([10,20,30,40]) => [10,20,40];

// Create a function problem1_2() that takes a grade (integer) between 0 and 10 
// and returns a string. 
// The string should say "bad" if the grade is in the interval 0-5, 
// "ok" if the grade is 6-7, 
// "good" if the grade is 8-9, 
// and "great" if the grade is 10.

create function problem1_2(integer x) -> Charstring
  as /* Write your solution here */


validate "problem 1-2"
  check problem1_2(4) => "bad"
  check problem1_2(5) => "bad"
  check problem1_2(6) => "ok"
  check problem1_2(7) => "ok"
  check problem1_2(8) => "good"
  check problem1_2(9) => "good"
  check problem1_2(10) => "great";

// Create a function problem1_3() that takes an integer 
// and checks if it is outside the interval [5,10]. 
// That is, it should return the integer if it is less than 5 or greater than 10, 
// otherwise it should not return anything.

create function problem1_3(integer i) -> integer
  as /* Write your solution here */


validate "problem 1-3"
  check problem1_3(3) => 3
  check problem1_3(4) => 4
  check problem1_3(5) => null
  check problem1_3(6) => null
  check problem1_3(9) => null
  check problem1_3(10) => null
  check problem1_3(11) => 11
  check problem1_3(12) => 12;

// Create a function problem1_4() that takes a vector of integers 
// and finds the index that holds the highest value.

create function problem1_4(vector of integer v) -> integer
  as /* Write your solution here */


validate "problem 1-4"
  check problem1_4([1,2,3,4,5,6,100,8,9,10]) => 7
  check problem1_4([1,2,3,100,5,6,100,8,9,10]) => bag(4,7);

// Create a function 'problem2_1()' that takes a a stream of numbers 
// and only emits the numbers that are less than 10.

create function problem2_1(stream of number s) -> stream of number
  as /* Write your solution here */


validate "problem 2-1"
  check problem2_1(vstream([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))
          => bag(1,2,3,4,5,6,7,8,9);